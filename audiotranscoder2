#!/usr/bin/env python3
"""
audiotranscode
Copyright (c) 2013 Tom Wallroth, 2015 Stefan Schindler

Sources on github:
  http://github.com/devsnd/audiotranscode/

licensed under GNU GPL version 3 (or later)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>
"""


# Imports
import os
import argparse
import audiotranscode

# Colors
def red(msg):
	return('\033[31m{}\033[0m'.format(msg))
def green(msg):
	return('\033[32m{}\033[0m'.format(msg))

# List available codecs
transcoder = audiotranscode.AudioTranscode()
def list_codecs():
	outstring = list()
	row_format = "{:>10}" * 3
	outstring.append('Decoders:')
	outstring.append(row_format.format('DECODER', 'INSTALLED', 'FILETYPE'))
	for dec in transcoder.Decoders:
		avail = 'yes' if dec.available() else 'no'
		outstring.append(row_format.format(dec.command[0], avail, dec.filetype))

	outstring.append('Encoders:')
	outstring.append(row_format.format('ENCODER', 'INSTALLED', 'FILETYPE'))
	for enc in transcoder.Encoders:
		avail = 'yes' if enc.available() else 'no'
		outstring.append(row_format.format(enc.command[0], avail, enc.filetype))
	return '\n'.join(outstring)

# Arguments
parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter, 
	description='Convert a audo file or a directory of audio files between the following formats:\n'
	'{}'.format(list_codecs()),
	epilog='Copyright (c) 2013 Tom Wallroth (project author),\n'
	'              2015 Stefan Schindler (this script only)\n'
	'Licensed under the GNU General Public License version 3 or later')
parser.add_argument('input', help='Source path or file', metavar='<source>')
parser.add_argument('output', help='Output path or file, must be of same type as source', metavar='<target>')
parser.add_argument('-b', '--bitrate', type=int, help='Target audio bitrate in kbps', metavar='<kbps>')
parser.add_argument('-f', '--format', help='Target audio format in form of filename extension, required when converting directories', metavar='<filetype>')
parser.add_argument('-s', '--skip', action='store_true', help='Skip files when already present at target, does not check content of target files in any way')
parser.add_argument('-d', '--delete', action='store_true', help='Delete files and folders in target directory when there is no equivalent in the source directory')
args = parser.parse_args()

# Convert single file
if not os.path.exists(args.input):
	parser.error('Source does not exist')
if os.path.isfile(args.input):
	if args.skip and os.path.isfile(args.output):
		print('Target file already exists, nothing to do')
		raise SystemExit

	print('Converting {} ...'.format(args.input), end=' ', flush=True)
	try:
		transcoder.transcode(args.input, args.output, args.bitrate)
	except (audiotranscode.TranscodeError, IOError) as err:
		if os.path.isfile(args.output):
			os.remove(args.output)
		print(red(str(err)))
		print('Try the --help switch to see all installed codecs')
	except KeyboardInterrupt:
		if os.path.isfile(args.output):
			os.remove(args.output)
		print(red('Canceled'))
	else:
		print(green('OK'))
	raise SystemExit

# Convert directory, validate source and target
if not os.path.isdir(args.input):
	parser.error('Source is invalid')
if not os.path.isdir(args.output):
	parser.error('Target directory does not exist')
if args.format is None:
	parser.error('Specify --format of target when converting directories')

# Validate target format
if not args.format in transcoder.available_encoder_formats():
	parser.error('{} is not a valid target format'.format(args.format))

# Containers and counters
file_transcodings = list()
valid_outfiles = list()
skipped = 0

# Search input directory
for (current_indir, dirnames, filenames) in os.walk(args.input):
	# Prepare output directory
	current_outdir = os.path.join(args.output, os.path.relpath(current_indir, args.input))
	try:
		os.makedirs(os.path.abspath(current_outdir))
	except FileExistsError:
		pass

	# Handle files in current directory
	for name in filenames:
		# Calculate filename properties
		infile = os.path.join(current_indir, name)
		extension = name.split('.')[-1]
		outfile = os.path.join(current_outdir, name.rstrip(extension) + args.format)
		valid_outfiles.append(os.path.abspath(outfile))

		# Skip ones that are present in target directory
		if args.skip and os.path.isfile(outfile):
			skipped += 1
			continue

		# Store as dict instead of tuple to prevent confusion
		file_transcodings.append({'in': infile, 'ext': extension, 'out': outfile})

# Ask user to continue
print('{} files to convert, skipped {} already present in target directory'.format(len(file_transcodings), skipped))
def ask_continue():
	try:
		user_continue = input('Continue? [y/n] ')
	except KeyboardInterrupt:
		print(red('Canceled'))
		raise SystemExit
	if user_continue != 'y':
		print(red('Canceled'))
		raise SystemExit
if file_transcodings:
	ask_continue()
elif not args.delete:
	print('Nothing to do')
	raise SystemExit

# Transcode files recursively
error_count = dict()
success_count = 0
total_count = 0
for file in file_transcodings:
	print('[{}/{}] Converting {} ...'.format(total_count+1, len(file_transcodings), file['in']), end=' ', flush=True)
	try:
		transcoder.transcode(file['in'], file['out'], args.bitrate)
	except (audiotranscode.TranscodeError, IOError) as err:
		if os.path.isfile(file['out']):
			os.remove(file['out'])
		if file['ext'] in error_count:
			error_count[file['ext']] += 1
		else:
			error_count[file['ext']] = 1
		print(red(str(err).strip('\'')))
	except KeyboardInterrupt:
		if os.path.isfile(file['out']):
			os.remove(file['out'])
		print(red('Canceled'))
		break
	else:
		success_count += 1
		print(green('OK'))
	total_count += 1

# Transcode statistics
if success_count > 0:
	print(green('Sucessfully transcoded {} files'.format(success_count)))
stat_string = list()
for extension in error_count:
	stat_string.append('{}x .{}'.format(error_count[extension], extension))
if len(error_count) > 0:
	print(red('Faild to transcode: {}'.format(', '.join(stat_string))))
	print('Try the --help switch to see all installed codecs')

# Find invalid target files
if not args.delete:
	raise SystemExit
invalid_outfiles = list()
for (dirpath, dirnames, filenames) in os.walk(args.output):
	for name in filenames:
		filepath = os.path.join(dirpath, name)
		if not os.path.abspath(filepath) in valid_outfiles:
			print('Will delete: {}'.format(filepath))
			invalid_outfiles.append(filepath)

# Ask user for confirmation
print('Will delete {} invalid files in target directory'.format(len(invalid_outfiles)))
if len(invalid_outfiles) > 0:
	ask_continue()
	for entry in invalid_outfiles:
		os.remove(entry)

# Delete empty directories
for (dirpath, dirnames, filenames) in os.walk(args.output, topdown=False):
	try:
		os.rmdir(dirpath)
	except OSError:
		pass
	else:
		print('Deleted empty directory: {}'.format(dirpath))
print(green('Finished'))

